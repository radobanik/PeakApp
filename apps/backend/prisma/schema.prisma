generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String @id @default(uuid())
  userName  String @unique
  password  String
  email     String @unique
  firstName String
  lastName  String
  roles     Role[]

  birthday DateTime?
  height     Int?
  weight     Float?

  cityId String? // Foreign key to City
  city   City?   @relation(fields: [cityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deleted   Boolean   @default(false)

  /**
   * SAVED RELATIONSHIP
   */
  savedRoutes Route[] @relation("RouteSaves")

  /**
   * FOREIGN RELATIONSHIPS
   */
  files                      PeakFile[]
  routeCreatedBy             Route[]          @relation(name: "RouteCreatedBy")
  routeUpdatedBy             Route[]          @relation(name: "RouteUpdatedBy")
  climbingStructureCreatedBy ClimbingObject[] @relation(name: "ClimbingObjectCreatedBy")
  climbingStructureUpdatedBy ClimbingObject[] @relation(name: "ClimbingObjectUpdatedBy")
  activityCreatedBy Activity[] @relation(name: "ActivityCreatedBy")
  Session Session[] @relation(name: "SessionCreatedBy")
}

model PeakFile {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  contentType String
  path        String

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  /**
   * FOREIGN RELATIONSHIPS
   */
  routeImage            Route?          @relation(name: "RouteImage")
  additionalRouteImages RoutePeakFile[] @relation(name: "AdditionalRouteImages")
  SessionPeakFile SessionPeakFile[] @relation(name: "SessionImages")
  sessionid String?
  session Session? @relation(fields: [sessionid], references: [id])
}

model Grade {
  id      String  @id @default(uuid())
  deleted Boolean @default(false)
  rating  Int
  name    String
  color   String

  /**
   * FOREIGN RELATIONSHIPS
   */
  routes Route[]
}

enum Role {
  ADMIN
  MAINTANER
  USER
}

model Route {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deleted   Boolean   @default(false)

  createdById String
  createdBy   User    @relation(name: "RouteCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?   @relation(name: "RouteUpdatedBy", fields: [updatedById], references: [id])

  name                  String
  description           String                @default("")
  climbingStructureType ClimbingStructureType

  gradeId String
  grade   Grade  @relation(fields: [gradeId], references: [id])

  longitude Float
  latitude  Float

  imageId          String?         @unique
  image            PeakFile?       @relation(name: "RouteImage", fields: [imageId], references: [id])
  additionalImages RoutePeakFile[]
  overlay          Json            @default("[]")

  climbingObjectId String
  climbingObject   ClimbingObject @relation(fields: [climbingObjectId], references: [id])

  /**
   * SAVED RELATIONSHIP
   */
  savedBy User[] @relation("RouteSaves")
  Activity Activity[] @relation()
}

model RoutePeakFile {
  routeId    String
  peakFileId String

  route    Route    @relation(fields: [routeId], references: [id])
  peakFile PeakFile @relation(name: "AdditionalRouteImages", fields: [peakFileId], references: [id])

  @@id([routeId, peakFileId])
}

enum ClimbingStructureType {
  TRAVERSE
  OVERHANG
  SLAB
  WALL
}

model ClimbingObject {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deleted   Boolean   @default(false)

  createdById String
  createdBy   User    @relation(name: "ClimbingObjectCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?   @relation(name: "ClimbingObjectUpdatedBy", fields: [updatedById], references: [id])

  name      String
  longitude Float
  latitude  Float

  routes Route[]
}

model Country {
  id   String @id @default(uuid())
  code String @unique
  name String
  long Float
  lat  Float

  cities City[]
}

model City {
  id        String  @id @default(uuid())
  name      String
  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  long Float?
  lat  Float?

  users User[] @relation
}


enum Difficulty {
  EASY
  MEDIUM
  HARD
  ULTRA_HARD
}

model Activity {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime?

  createdById String
  createdBy   User     @relation(name: "ActivityCreatedBy", fields: [createdById], references: [id])

  climbedAt   DateTime
  reviewStars Int
  reviewText  String
  numOfAttempts Int
  perceivedDifficulty Difficulty
  notes       String
  topped      Boolean

  /* FOREIGN RELATIONSHIP */
  sessionid String?
  session   Session? @relation( fields: [sessionid], references: [id])
  routeId   String
  route     Route @relation(fields: [routeId], references: [id])
}

model Session {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  deleted     Boolean  @default(false)

  createdById String
  createdBy   User     @relation(name: "SessionCreatedBy", fields: [createdById], references: [id])

  note        String

  /* FOREIGN RELATIONSHIP */
  photos              SessionPeakFile[]
  assignedActivities  Activity[]

  PeakFile PeakFile[]
}

model SessionPeakFile {
  sessionId   String
  peakFileId String

  session     Session    @relation(fields: [sessionId], references: [id])
  peakFile  PeakFile @relation(name: "SessionImages",fields: [peakFileId], references: [id])

  @@id([sessionId, peakFileId])
}
